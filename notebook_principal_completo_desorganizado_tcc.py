# -*- coding: utf-8 -*-
"""Notebook Principal Completo Desorganizado- TCC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5Tm_Qacz6Vtgvv_3_o1QbU-mgR7e8mM
"""

#id_municipio == "3550308"

!pip install basedosdados
#!pip install -U pandas-profiling

import numpy as np
import pandas as pd
import basedosdados as bd

df_ideb = bd.read_table(dataset_id='br_inep_ideb', 
                            table_id='escola',
                            billing_project_id='meu-tcc-308320')


df_idesp = bd.read_table(dataset_id='br_sp_seduc_idesp', 
                             table_id='escola',
                             billing_project_id='meu-tcc-308320')
 
  
df_fluxo = bd.read_table(dataset_id='br_sp_seduc_fluxo_escolar', 
                             table_id='escola',
                             billing_project_id='meu-tcc-308320')    


df_inse = bd.read_table(dataset_id='br_sp_seduc_inse', 
                            table_id='escola',
                            billing_project_id='meu-tcc-308320')   


df_indicadores = bd.read_table(dataset_id='br_inep_indicadores_educacionais', 
                                   table_id='escola',
                                   billing_project_id='meu-tcc-308320')

df_matriculas = pd.read_csv('/content/bquxjob_68ef2f68_17bff969719.csv')

df_matriculas['id_municipio'] = df_matriculas['id_municipio'].astype(str)

df_matriculas = df_matriculas[df_matriculas['id_municipio'].str.contains('3550308')]

df_matriculas = df_matriculas.query('2021 > ano >= 2015')

df_matriculas['id_escola'] = df_matriculas['id_escola'].astype(str)

len(df_matriculas['id_escola'].unique())

df_matriculas = df_matriculas[['ano','id_municipio','id_escola','etapa_ensino','sexo','raca_cor']]

df_matriculas.head()

indicadores = df_indicadores[
                             [
                              'ano',
                              'id_municipio',
                              'id_escola',
                              'rede', 
                              'atu_em', 
                              'had_em', 'tdi_em',
                              'taxa_aprovacao_em',
                              'taxa_reprovacao_em',
                              'taxa_abandono_em',
                              'icg_nivel_complexidade_gestao_escola'
                              ]
                             ]

indicadores_nivel_escola = indicadores.query('id_municipio == "3550308" & rede =="estadual" & 2020 > ano >= 2015')

indicadores_nivel_escola['icg_nivel_complexidade_gestao_escola'] = indicadores_nivel_escola['icg_nivel_complexidade_gestao_escola'].str.replace('nivel ','')
indicadores_nivel_escola['icg_nivel_complexidade_gestao_escola'] = indicadores_nivel_escola['icg_nivel_complexidade_gestao_escola'].astype(int)

df_idesp = df_idesp.query('id_municipio == "3550308" & 2020 > ano >= 2015')

idesp_resumido = df_idesp[['ano','id_municipio','id_escola','nota_idesp_em']]

indicadores_idesp = pd.merge(indicadores_nivel_escola,idesp_resumido,on=["ano","id_municipio","id_escola"],how='left')

inse_resumido = df_inse[['id_escola','diretoria','nivel_socio_economico']]

indicadores_idesp_inse = pd.merge(indicadores_idesp,inse_resumido,on="id_escola",how="left")

indicadores_idesp_inse.head()

pd.merge(indicadores_idesp_inse,df_matriculas,on="id_escola",how="left")

indicadores_idesp_inse.to_csv('indicadores.csv')

len(indicadores_idesp_inse['id_escola'].unique())

#base completa com valores que não são nulos na nota do idesp
indicadores_idespnotnull_inse = indicadores_idesp_inse.dropna()

indicadores_idespnotnull_inse.head()

indicadores_idespnotnull_inse.to_csv('indicadores.csv')

len(indicadores_idespnotnull_inse.id_escola.unique())

grupo_por_diretoria = indicadores_idespnotnull_inse.groupby(['ano','diretoria'])[['atu_em','had_em','tdi_em','taxa_aprovacao_em','taxa_reprovacao_em','taxa_abandono_em','icg_nivel_complexidade_gestao_escola','nota_idesp_em','nivel_socio_economico']].mean()

base_transp = indicadores_idespnotnull_inse.pivot_table(index= ['id_escola','diretoria'], columns='ano', values=['atu_em','had_em','tdi_em','taxa_aprovacao_em','taxa_reprovacao_em','taxa_abandono_em','icg_nivel_complexidade_gestao_escola','nota_idesp_em','nivel_socio_economico']).reset_index()
base_transp = pd.DataFrame(base_transp.to_records())
base_transp = base_transp.iloc[:,1:]
base_transp.head()

base_transp[base_transp["('diretoria', '')"].str.contains('SUL')]

df_central = base_transp.groupby(base_transp.columns[1]).mean()

base_transp_central = pd.DataFrame(df_central.to_records())

base_transp_central = base_transp_central.round(3)

base_transp_central.head()

base_transp_central.to_csv('base_central_transposta_tcc.csv')

from string import ascii_letters
import seaborn as sns
import matplotlib.pyplot as plt

sns.set_theme(style="white")

corr = grupo_por_diretoria.corr()

mask = np.triu(np.ones_like(corr, dtype=bool))

f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(230, 20, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

# Increase the size of the heatmap.
plt.figure(figsize=(16, 6))
# Store heatmap object in a variable to easily access it when you want to include more features (such as title).
# Set the range of values to be displayed on the colormap from -1 to 1, and set the annotation to True to display the correlation values on the heatmap.
heatmap = sns.heatmap(grupo_por_diretoria.corr(), vmin=-1, vmax=1, annot=True)
# Give a title to the heatmap. Pad defines the distance of the title from the top of the heatmap.
heatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);

grupo_por_diretoria.corr().round(2)

grupo_por_diretoria.corr().round(2).to_csv('heatmap_csv.csv')

"""Situação de 3 variáveis

Como analisar os modelos de 3 variáveis

Árvore de decisão
"""

df_central.to_csv('df_central_tcc.csv')

df_central.head()

df_atu = df_central.iloc[:,0:5]

df_atu['taxa_de_crescimento'] = (df_atu["('atu_em', 2019)"] - df_atu["('atu_em', 2015)"])/df_atu["('atu_em', 2015)"]

df_atu
df_dsu
df_had
df_idesp
df_abandono
df_aprovacao
df_reprovacao
df_tdi

"""Na maioria das sub-regiões, tivemos queda na média de alunos por turma. Por quê?"""

df_atu

df_dsu = df_central.iloc[:,5:10]

df_dsu['taxa_de_crescimento'] = (df_dsu["('dsu_em', 2019)"] - df_dsu["('dsu_em', 2015)"])/df_dsu["('dsu_em', 2015)"]

df_had = df_central.iloc[:,10:15]

df_had['taxa_de_crescimento'] = (df_had["('had_em', 2019)"] - df_had["('had_em', 2015)"])/df_had["('had_em', 2015)"]

df_had

df_idesp = df_central.iloc[:,15:20]

df_idesp['taxa_de_crescimento'] = (df_idesp["('nota_idesp_em', 2019)"] - df_idesp["('nota_idesp_em', 2015)"])/df_idesp["('nota_idesp_em', 2015)"]

df_idesp

df_abandono = df_central.iloc[:,20:25]

df_abandono['taxa_de_crescimento'] = (df_abandono["('taxa_abandono_em', 2019)"] - df_abandono["('taxa_abandono_em', 2015)"])/df_abandono["('taxa_abandono_em', 2015)"]

df_aprovacao = df_central.iloc[:,25:30]

df_aprovacao['taxa_de_crescimento'] = (df_aprovacao["('taxa_aprovacao_em', 2019)"] - df_aprovacao["('taxa_aprovacao_em', 2015)"])/df_aprovacao["('taxa_aprovacao_em', 2015)"]

taxa_aprovacao_em

df_reprovacao = df_central.iloc[:,30:35]

df_reprovacao['taxa_de_crescimento'] = (df_reprovacao["('taxa_reprovacao_em', 2019)"] - df_reprovacao["('taxa_reprovacao_em', 2015)"])/df_reprovacao["('taxa_reprovacao_em', 2015)"]

df_tdi = df_central.iloc[:,35:40]

df_tdi['taxa_de_crescimento'] = (df_tdi["('tdi_em', 2019)"] - df_tdi["('tdi_em', 2015)"])/df_tdi["('tdi_em', 2015)"]

df_inse.head()

df_inse.query('id_municipio == "3550308"').groupby('diretoria')['nivel_socio_economico'].mean().sort_values(ascending=False)